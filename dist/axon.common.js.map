{"version":3,"sources":["es6/axon.common.js"],"names":[],"mappings":"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","file":"axon.common.js","sourcesContent":["'use strict';\n\n/**\r\n     * Store strings to avoid duplicate strings\r\n     */\r\n    const _more = \": \";\r\n    const _error = \"error in \";\r\n    const _factory = \"factory\";\r\n    const _service = \"service\";\r\n    const _isUndefined = \" is undefined\";\n\n/**\n     * Checks if service exist, else add it\n     *\n     * @param {String} type The type of the service (service/factory)\n     * @param {Function} cf The Constructor function of the service\n     * @param {String} name The name to register/id the service\n     * @param {Array} deps List of dependencies\n     * @param {Function} fn Content of the service\n     * @returns {Object} Returns `this`\n     */\nfunction provider (type, cf, name, deps, fn) {\n        const _this = this;\n\n        if (_this.chev[name]) {\n            //throw error if a service with this name already exists\n            throw _this.id + _more + _error + name + \" already exists\";\n        } else {\n            //Add the service to container\n            _this.chev[name] = {\n                type,\n                cf,\n                name,\n                deps,\n                fn,\n                init: false\n            };\n\n            return _this;\n        }\n    }\n\n/**\n     * Adds a new service type\n     *\n     * @param {String} type The name of the type\n     * @param {Function} cf Constructor function to init the service with\n     * @returns {Object} Returns `this`\n     */\nfunction extend (type, cf) {\n        const _this = this;\n\n        //Add customType method to container\n        _this[type] = function (name, deps, fn) {\n            return _this.provider(type, cf, name, deps, fn);\n        };\n\n        return _this;\n    }\n\n/**\n     * Collects dependencies and initializes service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to check\n     * @param {Object} list The list of dependencies\n     * @returns {Object} Returns `service`\n     */\nfunction initialize (_this, service, list) {\n        if (!service.init) {\n            const bundle = [];\r\n\n            //Collect an ordered Array of dependencies\n            service.deps.forEach(item => {\n                const dependency = list[item];\n\n                if (dependency) {\n                    bundle.push(dependency.fn);\n                }\n            });\n\n            //Init service\n            //Call Constructor fn with service/deps\n            service = service.cf(service, bundle);\n            service.init = true;\n        }\n\n        return service;\n    }\n\n/**\n     * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Array} service The dependencyList to iterate\n     * @param {Function} fn The function run over each dependency\n     * @returns void\n     */\n    function recurseDependencies(_this, service, fn) {\n        //loop trough deps\n        service.deps.forEach(name => {\n            const dependency = _this.chev[name];\n\n            if (dependency) {\n                //recurse over sub-deps\n                recurseDependencies(_this, dependency, fn);\n                //run fn\n                fn(dependency);\n            } else {\n                //if not found error with name\n                throw _this.id + _more + _error + service.name + _more + \"dependency \" + name + _isUndefined;\n            }\n        });\n    }\n\n/**\n     * Check if every dependency is available\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to prepare\n     * @returns {Object} Initialized service\n     */\nfunction prepare(_this, service) {\n        const list = {};\n\n        //Recurse trough service deps\n        recurseDependencies(\n            _this,\n            service,\n            //run this over every dependency to add it to the dependencyList\n            dependency => {\n                //make sure if dependency is initialized, then add\n                list[dependency.name] = initialize(_this, dependency, list);\n            }\n        );\n\n        return initialize(_this, service, list);\n    }\n\n/**\n     * Access service with dependencies bound\n     *\n     * @param {String} name The Name of the service\n     * @returns {*} Returns Content of the service\n     */\nfunction access(name) {\n        const _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            //Call prepare with bound context\n            return prepare(_this, accessedService).fn;\n        }\n    }\n\n/**\n     * Creates method entry for service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @returns Returns void\n     */\nfunction initService(_this) {\n        _this.extend(_service, function(service, bundle) {\n            //Construct service\n            const serviceFn = service.fn;\n\n            service.fn = function() {\n                //Chevron service function wrapper\n                return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n            };\n\n            return service;\n        });\n    }\n\n/**\n     * Creates method entry for factory\n     *\n     * @private\n     * @param {Object} _this The context\n     * @returns Returns void\n     */\nfunction initFactory(_this) {\n        _this.extend(_factory, function(service, bundle) {\n            //Construct factory\n\n            //First value gets ignored by calling new like this, so we need to fill it\n            bundle.unshift(null);\n\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n            return service;\n        });\n    }\n\n/**\r\n     * Basic Chevron Constructor\r\n     *\r\n     * @constructor\r\n     * @param {String} id To identify the instance\r\n     * @returns {Object} Returns Chevron instance\r\n     */\r\n    let Chevron = function(id) {\r\n        const _this = this;\r\n\r\n        //Instance Id\r\n        _this.id = id || \"cv\";\r\n        //Instance container\r\n        _this.chev = {};\r\n\r\n        //Init default types\r\n        initService(_this);\r\n        initFactory(_this);\r\n    };\r\n\r\n    /**\r\n     * Expose Chevron methods\r\n     */\r\n    Chevron.prototype = {\r\n        //Core service/factory method\r\n        provider,\r\n        //Prepare/init services/factory with deps injected\r\n        access,\r\n        //Add new service type\r\n        extend\r\n    };\n\n/**\r\n     * Store constants\r\n     */\r\n    const _window = window;\r\n    const _document = _window.document;\r\n    const _domNameSpace = \"xn\";\r\n    const _expressionRegex = /{{(.+)}}/g;\n\n/**\r\n     * Creates querySelector string\r\n     *\r\n     * @private\r\n     * @param {String} data The data id\r\n     * @param {String} val The data value\r\n     * @return {String} Returns Query\r\n     */\r\nfunction constructQuery(data, val) {\r\n        if (!val || val === \"*\") {\r\n            return `[${_domNameSpace}-${data}]`;\r\n        } else {\r\n            return `[${_domNameSpace}-${data}='${val}']`;\r\n        }\r\n    }\n\n/**\r\n     * Query multiple from DOM\r\n     *\r\n     * @private\r\n     * @param {String} data The data id\r\n     * @param {String} val The data value\r\n     * @param {Node} context optional, query context\r\n     * @return {NodeList} Returns NodeList\r\n     */\r\nfunction queryDirective(data, val, context) {\r\n        return (context ? context : _document).querySelectorAll(constructQuery(data, val));\r\n    }\n\n/**\r\n     * Read Data from element\r\n     *\r\n     * @private\r\n     * @param {Node} element The Element to read\r\n     * @param {String} data The data attr to read\r\n     * @return {String} Returns value\r\n     */\r\nfunction readDirective(element, data) {\r\n        return element.attributes[`${_domNameSpace}-${data}`].value;\r\n    }\n\n/**\r\n     * calculates Expression\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @param {Object} expression The Expression\r\n     * @return void\r\n     */\r\nfunction evaluate(ctrl, expression) {\r\n        const result = ctrl[expression.data];\r\n\r\n        console.log(expression.val, result);\r\n        expression.parent.textContent = expression.parent.textContent.replace(expression.val, result);\r\n        expression.val = result;\r\n\r\n        return result;\r\n    }\n\n/**\r\n     * Digest & render dom\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Node} context The Controller context\r\n     */\r\nfunction digest(ctrl) {\r\n        //@TODO implement debounce\r\n\r\n        console.log(\"digest\");\r\n        //Calc expressions\r\n        ctrl.$expressions.forEach(expression => {\r\n            evaluate(ctrl, expression);\r\n        });\r\n    }\n\n/**\r\n     * Misc Utility functions\r\n     */\r\n\r\n    /**\r\n     * iterate over NoddeList\r\n     *\r\n     * @private\r\n     * @param {NodeList} NodeList The Elements to bind\r\n     * @param {Function} fn The Function to call\r\n     * @return void\r\n     */\r\n    function eachNode(NodeList, fn) {\r\n        const l = NodeList.length;\r\n        let i = 0;\r\n\r\n        while (i < l) {\r\n            fn(NodeList[i], i);\r\n            i++;\r\n        }\r\n    }\n\n/**\r\n     * Binds event to dom\r\n     *\r\n     * @private\r\n     * @param {NodeList} domList The Elements to bind\r\n     * @param {String} type The Event type\r\n     * @param {Function} fn The Even function\r\n     * @return void\r\n     */\r\nfunction bind(domList, type, fn) {\r\n        eachNode(domList, dom => {\r\n            dom.addEventListener(type, eventFn, false);\r\n\r\n            function eventFn(ev) {\r\n                return fn(ev, dom);\r\n            }\r\n        });\r\n    }\n\n/**\r\n     * Binds xn-model\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Node} context The Controller context\r\n     */\r\nfunction bindModel(ctrl, context) {\r\n        const result = [];\r\n        const elements = queryDirective(\"model\", \"*\", context);\r\n\r\n        bind(elements, \"change\", modelEvent);\r\n        bind(elements, \"keydown\", modelEvent);\r\n\r\n        eachNode(elements, (element, index) => {\r\n            result.push({\r\n                index,\r\n                element,\r\n                type: \"model\",\r\n                value: readDirective(element, \"model\")\r\n            });\r\n        });\r\n\r\n        return result;\r\n\r\n        function modelEvent(ev, dom) {\r\n            const content = dom.value;\r\n            const modelFor = readDirective(dom, \"model\");\r\n\r\n            console.log(\"MODEL:\", modelFor, content);\r\n            ctrl[modelFor] = content;\r\n\r\n            digest(ctrl);\r\n        }\r\n    }\n\n/**\r\n     * Binds directives to controller\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Object} Returns bound Object\r\n     */\r\nfunction bindDirectives(ctrl) {\r\n        const context = ctrl.$context;\r\n\r\n        return {\r\n            model: bindModel(ctrl, context)\r\n        };\r\n    }\n\n/**\r\n     * Query Expressions\r\n     *\r\n     * @private\r\n     * @param {Node} context The Element context\r\n     * @return {NodeList} Returns NodeList\r\n     */\r\nfunction queryExpressions(context) {\r\n        const result = [];\r\n        const nodes = getTextNodes(context);\r\n        let match;\r\n\r\n        //Iterate Nodes\r\n        nodes.forEach(node => {\r\n          //Iterate Regex\r\n            while ((match = _expressionRegex.exec(node.textContent)) !== null) {\r\n                if (match.index === _expressionRegex.lastIndex) {\r\n                    _expressionRegex.lastIndex++;\r\n                }\r\n\r\n                result.push({\r\n                    match: match[0],\r\n                    data: match[1],\r\n                    val: match[0],\r\n                    index: match.index,\r\n                    parent : node\r\n                });\r\n            }\r\n        });\r\n\r\n        return result;\r\n\r\n        //Modified version of http://stackoverflow.com/questions/10730309/find-all-text-nodes-in-html-page\r\n        function getTextNodes(node) {\r\n            let all = [];\r\n            for (node = node.firstChild; node; node = node.nextSibling) {\r\n                if (node.nodeType === 3 && node.parentNode.nodeName !== \"SCRIPT\") {\r\n                    all.push(node);\r\n                } else {\r\n                    all = all.concat(getTextNodes(node));\r\n                }\r\n            }\r\n            return all;\r\n        }\r\n    }\n\n/**\r\n     * Binds expressions\r\n     *\r\n     * @private\r\n     * @return {Node} context The Controller context\r\n     */\r\nfunction bindExpressions$1(context) {\r\n        const elements = queryExpressions(context);\r\n\r\n        return elements;\r\n    }\n\n/**\r\n     * Binds directives to controller\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Object} Returns bound Object\r\n     */\r\nfunction bindExpressions(ctrl) {\r\n        const context = ctrl.$context;\r\n        return bindExpressions$1(context);\r\n    }\n\n/**\r\n     * Creates typeList entry for Controller\r\n     *\r\n     * @private\r\n     * @param {Object} service The service\r\n     * @param {Object} bundle The service deps\r\n     * @return {Function} service\r\n     */\r\nfunction controllerFn(service, bundle) {\r\n        //Construct Controller\r\n        //\r\n        //First value gets ignored by calling new like this, so we need to fill it\r\n        bundle.unshift(null);\r\n        //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\r\n        const ctrl = service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\r\n\r\n\r\n        //Bind Context\r\n        ctrl.$context = queryDirective(\"controller\", service.name)[0];\r\n        ctrl.$expressions = bindExpressions(ctrl);\r\n        ctrl.$directives = bindDirectives(ctrl);\r\n        //run first digest\r\n        digest(ctrl);\r\n\r\n        console.log(service);\r\n\r\n        return service;\r\n    }\n\n/**\r\n     * Basic Axon Constructor\r\n     *\r\n     * @constructor\r\n     * @param {String} id To identify the instance\r\n     * @returns {Object} Returns Axon instance\r\n     */\r\n    let Axon = function(id) {\r\n        const _this = this;\r\n\r\n        //Instance Id\r\n        _this.id = id;\r\n        //Instance container\r\n        _this.cv = new Chevron(id + \"Container\");\r\n        //context\r\n        _this.context = queryDirective(\"app\", id)[0];\r\n\r\n        //Init Axon types\r\n        _this.cv.extend(\"controller\", controllerFn);\r\n    };\r\n\r\n    //Bind Chevron methods directly to parent\r\n    const methods = [\"access\", \"extend\", \"provider\", \"service\", \"factory\", \"controller\"];\r\n\r\n    methods.forEach(method => {\r\n        Axon.prototype[method] = function() {\r\n            return this.cv[method].apply(this.cv, Array.from(arguments));\r\n        };\r\n    });\n\nmodule.exports = Axon;"]}