{"version":3,"sources":["es6/axon.amd.js"],"names":[],"mappings":"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","file":"axon.amd.js","sourcesContent":["define('axon', function () { 'use strict';\n\n    /**\r\n     * Store strings to avoid duplicate strings\r\n     */\r\n    const _more = \": \";\r\n    const _error = \"error in \";\r\n    const _factory = \"factory\";\r\n    const _service = \"service\";\r\n    const _isUndefined = \" is undefined\";\n\n    /**\n     * Checks if service exist, else add it\n     *\n     * @param {String} type The type of the service (service/factory)\n     * @param {Function} cf The Constructor function of the service\n     * @param {String} name The name to register/id the service\n     * @param {Array} deps List of dependencies\n     * @param {Function} fn Content of the service\n     * @returns {Object} Returns `this`\n     */\n    function provider (type, cf, name, deps, fn) {\n        const _this = this;\n\n        if (_this.chev[name]) {\n            //throw error if a service with this name already exists\n            throw _this.id + _more + _error + name + \" already exists\";\n        } else {\n            //Add the service to container\n            _this.chev[name] = {\n                type,\n                cf,\n                name,\n                deps,\n                fn,\n                init: false\n            };\n\n            return _this;\n        }\n    }\n\n    /**\n     * Adds a new service type\n     *\n     * @param {String} type The name of the type\n     * @param {Function} cf Constructor function to init the service with\n     * @returns {Object} Returns `this`\n     */\n    function extend (type, cf) {\n        const _this = this;\n\n        //Add customType method to container\n        _this[type] = function (name, deps, fn) {\n            return _this.provider(type, cf, name, deps, fn);\n        };\n\n        return _this;\n    }\n\n    /**\n     * Collects dependencies and initializes service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to check\n     * @param {Object} list The list of dependencies\n     * @returns {Object} Returns `service`\n     */\n    function initialize (_this, service, list) {\n        if (!service.init) {\n            const bundle = [];\r\n\n            //Collect an ordered Array of dependencies\n            service.deps.forEach(item => {\n                const dependency = list[item];\n\n                if (dependency) {\n                    bundle.push(dependency.fn);\n                }\n            });\n\n            //Init service\n            //Call Constructor fn with service/deps\n            service = service.cf(service, bundle);\n            service.init = true;\n        }\n\n        return service;\n    }\n\n    /**\n     * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Array} service The dependencyList to iterate\n     * @param {Function} fn The function run over each dependency\n     * @returns void\n     */\n    function recurseDependencies(_this, service, fn) {\n        //loop trough deps\n        service.deps.forEach(name => {\n            const dependency = _this.chev[name];\n\n            if (dependency) {\n                //recurse over sub-deps\n                recurseDependencies(_this, dependency, fn);\n                //run fn\n                fn(dependency);\n            } else {\n                //if not found error with name\n                throw _this.id + _more + _error + service.name + _more + \"dependency \" + name + _isUndefined;\n            }\n        });\n    }\n\n    /**\n     * Check if every dependency is available\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to prepare\n     * @returns {Object} Initialized service\n     */\n    function prepare(_this, service) {\n        const list = {};\n\n        //Recurse trough service deps\n        recurseDependencies(\n            _this,\n            service,\n            //run this over every dependency to add it to the dependencyList\n            dependency => {\n                //make sure if dependency is initialized, then add\n                list[dependency.name] = initialize(_this, dependency, list);\n            }\n        );\n\n        return initialize(_this, service, list);\n    }\n\n    /**\n     * Access service with dependencies bound\n     *\n     * @param {String} name The Name of the service\n     * @returns {*} Returns Content of the service\n     */\n    function access(name) {\n        const _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            //Call prepare with bound context\n            return prepare(_this, accessedService).fn;\n        }\n    }\n\n    /**\n     * Creates method entry for service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @returns Returns void\n     */\n    function initService(_this) {\n        _this.extend(_service, function(service, bundle) {\n            //Construct service\n            const serviceFn = service.fn;\n\n            service.fn = function() {\n                //Chevron service function wrapper\n                return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n            };\n\n            return service;\n        });\n    }\n\n    /**\n     * Creates method entry for factory\n     *\n     * @private\n     * @param {Object} _this The context\n     * @returns Returns void\n     */\n    function initFactory(_this) {\n        _this.extend(_factory, function(service, bundle) {\n            //Construct factory\n\n            //First value gets ignored by calling new like this, so we need to fill it\n            bundle.unshift(null);\n\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n            return service;\n        });\n    }\n\n    /**\r\n     * Basic Chevron Constructor\r\n     *\r\n     * @constructor\r\n     * @param {String} id To identify the instance\r\n     * @returns {Object} Returns Chevron instance\r\n     */\r\n    let Chevron = function(id) {\r\n        const _this = this;\r\n\r\n        //Instance Id\r\n        _this.id = id || \"cv\";\r\n        //Instance container\r\n        _this.chev = {};\r\n\r\n        //Init default types\r\n        initService(_this);\r\n        initFactory(_this);\r\n    };\r\n\r\n    /**\r\n     * Expose Chevron methods\r\n     */\r\n    Chevron.prototype = {\r\n        //Core service/factory method\r\n        provider,\r\n        //Prepare/init services/factory with deps injected\r\n        access,\r\n        //Add new service type\r\n        extend\r\n    };\n\n    /**\r\n     * Store constants\r\n     */\r\n    const _window = window;\r\n    const _document = _window.document;\r\n    const _domNameSpace = \"xn\";\r\n    const _expressionRegex = /{{(.+)}}/g;\n\n    /**\r\n     * Creates querySelector string\r\n     *\r\n     * @private\r\n     * @param {String} data The data id\r\n     * @param {String} val The data value\r\n     * @return {String} Returns Query\r\n     */\r\n    function constructQuery(data, val) {\r\n        if (!val || val === \"*\") {\r\n            return `[${_domNameSpace}-${data}]`;\r\n        } else {\r\n            return `[${_domNameSpace}-${data}='${val}']`;\r\n        }\r\n    }\n\n    /**\r\n     * Query multiple from DOM\r\n     *\r\n     * @private\r\n     * @param {String} data The data id\r\n     * @param {String} val The data value\r\n     * @param {Node} context optional, query context\r\n     * @return {NodeList} Returns NodeList\r\n     */\r\n    function queryDirective(data, val, context) {\r\n        return (context ? context : _document).querySelectorAll(constructQuery(data, val));\r\n    }\n\n    /**\r\n     * Read Data from element\r\n     *\r\n     * @private\r\n     * @param {Node} element The Element to read\r\n     * @param {String} data The data attr to read\r\n     * @return {String} Returns value\r\n     */\r\n    function readDirective(element, data) {\r\n        return element.attributes[`${_domNameSpace}-${data}`].value;\r\n    }\n\n    /**\r\n     * Misc Utility functions\r\n     */\r\n\r\n    /**\r\n     * iterate over NoddeList\r\n     *\r\n     * @private\r\n     * @param {NodeList} NodeList The Elements to bind\r\n     * @param {Function} fn The Function to call\r\n     * @returns void\r\n     */\r\n    function eachNode(NodeList, fn) {\r\n        const l = NodeList.length;\r\n        let i = 0;\r\n\r\n        while (i < l) {\r\n            fn(NodeList[i], i);\r\n            i++;\r\n        }\r\n    }\r\n    /**\r\n     * Iterate object\r\n     *\r\n     * @private\r\n     * @param {Object} object The Object to iterate\r\n     * @param {Function} fn The Function to run\r\n     * @returns void\r\n     */\r\n    function eachObject(object, fn) {\r\n        const keys = Object.keys(object);\r\n        const l = keys.length;\r\n        let i = 0;\r\n\r\n        while (i < l) {\r\n            const currentKey = keys[i];\r\n\r\n            fn(object[currentKey], currentKey, i);\r\n            i++;\r\n        }\r\n    }\r\n    /**\r\n     * replace string at position\r\n     *\r\n     * @private\r\n     * @param {String} string The String to exec\r\n     * @param {String} find The String to find\r\n     * @param {String} replace The String to replace\r\n     * @param {Number} index The Index to start replacing\r\n     * @returns {String} replacedString\r\n     */\r\n    function replaceFrom(string, find, replace, index) {\r\n        return string.substr(0, index) + string.substr(index).replace(find, replace);\r\n    }\n\n    var text = {\r\n        onBind: function(ctrl, context) {\r\n            const result = [];\r\n            const nodes = getTextNodes(context);\r\n            let match;\r\n\r\n            //Iterate Nodes\r\n            nodes.forEach(node => {\r\n                //Iterate Regex\r\n                while ((match = _expressionRegex.exec(node.textContent)) !== null) {\r\n                    if (match.index === _expressionRegex.lastIndex) {\r\n                        _expressionRegex.lastIndex++;\r\n                    }\r\n\r\n                    result.push({\r\n                        match: match[0],\r\n                        data: match[1],\r\n                        val: match[0],\r\n                        index: match.index,\r\n                        parent: node\r\n                    });\r\n                }\r\n            });\r\n\r\n            return result;\r\n\r\n            //Modified version of http://stackoverflow.com/questions/10730309/find-all-text-nodes-in-html-page\r\n            function getTextNodes(node) {\r\n                let all = [];\r\n                for (node = node.firstChild; node; node = node.nextSibling) {\r\n                    if (node.nodeType === 3 && node.parentNode.nodeName !== \"SCRIPT\") {\r\n                        all.push(node);\r\n                    } else {\r\n                        all = all.concat(getTextNodes(node));\r\n                    }\r\n                }\r\n                return all;\r\n            }\r\n        },\r\n        onDigest: function(ctrl, context, entry) {\r\n            const result = ctrl[entry.data];\r\n\r\n            entry.parent.textContent = replaceFrom(entry.parent.textContent, entry.val, result, entry.index);\r\n            entry.val = result;\r\n\r\n            return result;\r\n        }\r\n    };\n\n    var expressions = {\r\n        text\r\n    };\n\n    /**\r\n     * Digest & render dom\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Node} context The Controller context\r\n     */\r\n    function digest(ctrl) {\r\n        //@TODO implement debounce\r\n\r\n        iteratePlugins(directives, ctrl.$directives, (entry, plugin) => {\r\n            plugin.onDigest(ctrl, ctrl.$context, entry);\r\n        });\r\n\r\n        iteratePlugins(expressions, ctrl.$expressions, (entry, plugin) => {\r\n            plugin.onDigest(ctrl, ctrl.$context, entry);\r\n        });\r\n\r\n\r\n        function iteratePlugins(pluginData, data, fn) {\r\n            eachObject(pluginData, (plugin, key) => {\r\n                const active = data[key];\r\n\r\n                active.forEach(entry => {\r\n                    fn(entry, plugin);\r\n                });\r\n            });\r\n        }\r\n    }\n\n    /**\r\n     * Binds event to dom\r\n     *\r\n     * @private\r\n     * @param {NodeList} domList The Elements to bind\r\n     * @param {String} type The Event type\r\n     * @param {Function} fn The Even function\r\n     * @return void\r\n     */\r\n    function bind(domList, type, fn) {\r\n        eachNode(domList, dom => {\r\n            dom.addEventListener(type, eventFn, false);\r\n\r\n            function eventFn(ev) {\r\n                return fn(ev, dom);\r\n            }\r\n        });\r\n    }\n\n    var model = {\r\n        onBind: function(ctrl, context) {\r\n            const result = [];\r\n            const elements = queryDirective(\"model\", \"*\", context);\r\n\r\n            bind(elements, \"change\", modelEvent);\r\n            bind(elements, \"input\", modelEvent);\r\n\r\n            eachNode(elements, (element, index) => {\r\n                result.push({\r\n                    index,\r\n                    element,\r\n                    type: \"model\",\r\n                    value: readDirective(element, \"model\")\r\n                });\r\n            });\r\n\r\n            return result;\r\n\r\n            function modelEvent(ev, dom) {\r\n                _window.setTimeout(() => {\r\n                    const content = dom.value;\r\n                    const modelFor = readDirective(dom, \"model\");\r\n\r\n                    console.log(\"MODEL:\", modelFor, content);\r\n                    ctrl[modelFor] = content;\r\n\r\n                    digest(ctrl);\r\n                }, 5);\r\n            }\r\n        },\r\n        onDigest: function(ctrl, context, entry) {\r\n            entry.element.value = ctrl[entry.value];\r\n        }\r\n    };\n\n    //import changeImported from \"./change\";\r\n\r\n    var directives = {\r\n        model\r\n    };\n\n    /**\r\n     * Binds directives to controller\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Object} Returns bound Object\r\n     */\r\n    function bindDirectives(ctrl) {\r\n        const result = {};\r\n\r\n        eachObject(directives, (directive, key, index) => {\r\n            result[key] = directive.onBind(ctrl, ctrl.$context);\r\n        });\r\n\r\n        return result;\r\n    }\n\n    /**\r\n     * Binds expressions to controller\r\n     *\r\n     * @private\r\n     * @param {Object} ctrl The Controller\r\n     * @return {Object} Returns bound Object\r\n     */\r\n    function bindExpressions(ctrl) {\r\n        const result = {};\r\n\r\n        eachObject(expressions, (expressions, key, index) => {\r\n            result[key] = expressions.onBind(ctrl, ctrl.$context);\r\n        });\r\n\r\n        return result;\r\n    }\n\n    /**\r\n     * Creates typeList entry for Controller\r\n     *\r\n     * @private\r\n     * @param {Object} service The service\r\n     * @param {Object} bundle The service deps\r\n     * @return {Function} service\r\n     */\r\n    function controllerFn(service, bundle) {\r\n        //Construct Controller\r\n        //\r\n        //First value gets ignored by calling new like this, so we need to fill it\r\n        bundle.unshift(null);\r\n        //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\r\n        const ctrl = service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\r\n\r\n\r\n        //Bind Context\r\n        ctrl.$context = queryDirective(\"controller\", service.name)[0];\r\n        ctrl.$expressions = bindExpressions(ctrl);\r\n        ctrl.$directives = bindDirectives(ctrl);\r\n        //run first digest\r\n        digest(ctrl);\r\n\r\n        console.log(service);\r\n\r\n        return service;\r\n    }\n\n    /**\r\n     * Basic Axon Constructor\r\n     *\r\n     * @constructor\r\n     * @param {String} id To identify the instance\r\n     * @returns {Object} Returns Axon instance\r\n     */\r\n    let Axon = function(id) {\r\n        const _this = this;\r\n\r\n        //Instance Id\r\n        _this.id = id;\r\n        //Instance container\r\n        _this.cv = new Chevron(id + \"Container\");\r\n        //context\r\n        _this.context = queryDirective(\"app\", id)[0];\r\n\r\n        //Init Axon types\r\n        _this.cv.extend(\"controller\", controllerFn);\r\n    };\r\n\r\n    //Bind Chevron methods directly to parent\r\n    const methods = [\"access\", \"extend\", \"provider\", \"service\", \"factory\", \"controller\"];\r\n\r\n    methods.forEach(method => {\r\n        Axon.prototype[method] = function() {\r\n            return this.cv[method].apply(this.cv, Array.from(arguments));\r\n        };\r\n    });\n\n    return Axon;\n\n});"]}