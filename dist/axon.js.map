{"version":3,"sources":["axon.js"],"names":[],"mappingsfile":"axon.js","sourcesContent":["var Axon = (function () {\n'use strict';\n\nvar _document = document;\n\nvar DOM_PREFIX = \"x-\";\n\n/**\n * iterate over NodeList\n *\n * @private\n * @param {NodeList} nodeList The nodeList to iterate over\n * @param {Function} fn The Function to call\n * @returns void\n */\n\nfunction eachNode(nodeList, fn) {\n    var l = nodeList.length;\n    var i = 0;\n\n    while (i < l) {\n        fn(nodeList[i], i);\n        i++;\n    }\n}\n\n/**\n * Iterate over Object\n *\n * @private\n * @param {Object} object The Object to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\n\n\n/**\n * Iterate over NamedNodeMap\n *\n * @private\n * @param {NamedNodeMap} namedNodeMap The NamedNodeMap to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\nfunction eachAttribute(namedNodeMap, fn) {\n    var l = namedNodeMap.length;\n    var i = 0;\n\n    while (i < l) {\n        var item = namedNodeMap.item(i);\n\n        fn(item.name, item.value, i);\n        i++;\n    }\n}\n\nvar crawlNodes = function crawlNodes(entry, fn) {\n    var recurseNodes = function recurseNodes(node, fn) {\n        var children = node.children;\n\n        if (children && children.length > 0) {\n            var result = true;\n\n            result = eachNode(children, function (childNode) {\n                return recurseNodes(childNode, fn);\n            });\n\n            return result;\n        } else {\n            return fn(node);\n        }\n    };\n\n    return recurseNodes(entry, fn);\n};\n\nvar getDirectives = function getDirectives(node, allowedNames, fn) {\n    eachAttribute(node.attributes, function (attributeName, attributeValue) {\n\n        //If is Axon attribute\n        if (attributeName.substr(0, DOM_PREFIX.length) === DOM_PREFIX) {\n            var splitName = attributeName.replace(DOM_PREFIX, \"\").split(\":\");\n\n            //If name is allowed\n            if (allowedNames.indexOf(splitName[0]) !== -1) {\n                fn(splitName[0], splitName[1], attributeValue);\n            }\n        }\n    });\n};\n\nvar bindEventString = function bindEventString(node, eventType, eventFnString, instance) {\n    //@TODO make this safer\n    //Split up function string\n    var eventFnStringSplit = eventFnString.substr(0, eventFnString.length - 1).split(\"(\");\n    var eventFnName = eventFnStringSplit[0];\n    var eventFnArgs = eventFnStringSplit[1].split(\",\").map(Number);\n    var eventFnTarget = instance.$methods[eventFnName];\n\n    if (typeof eventFnTarget === \"function\") {\n        var eventFn = function eventFn(e) {\n            var args = Array.from(eventFnArgs);\n\n            eventFnArgs.push(e);\n            eventFnTarget.call(instance, args);\n        };\n\n        node.addEventListener(eventType, eventFn, false);\n    } else {\n        throw new Error(\"Event fn '\" + eventFnName + \"' not found\");\n    }\n};\n\nvar init = function init() {\n    var _this = this;\n\n    return crawlNodes(_this.$context, function (node) {\n        getDirectives(node, [\"on\"], function (name, eventType, eventFnString) {\n            bindEventString(node, eventType, eventFnString, _this);\n        });\n    });\n};\n\nvar render = function render() {\n    var _this = this;\n};\n\n/**\r\n * Basic Axon Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Axon instance\r\n */\nvar Axon = function Axon(appConfig) {\n    var _this = this;\n\n    _this.$context = _document.querySelector(appConfig.context);\n    _this.$data = appConfig.data;\n    _this.$methods = appConfig.methods;\n\n    _this.init();\n    _this.render();\n};\n\n/**\r\n * Expose Axon methods\r\n */\nAxon.prototype = {\n    init: init,\n    render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n"]}