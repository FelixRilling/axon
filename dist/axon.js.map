{"version":3,"sources":["axon.js"],"names":[],"mappingsfile":"axon.js","sourcesContent":["var Axon = (function () {\n'use strict';\n\nvar mapNodes = function mapNodes(entry, fn) {\n    var result = {};\n    var recurseNodes = function recurseNodes(node, depth, container) {\n        container.node = node;\n        container.children = [];\n        fn(container, node, depth);\n\n        if (node.childElementCount) {\n            var childArr = Array.from(node.children);\n\n            childArr.forEach(function (childNode, index) {\n                container.children[index] = {};\n\n                recurseNodes(childNode, depth + 1, container.children[index]);\n            });\n        }\n    };\n\n    recurseNodes(entry, 0, result);\n\n    return result;\n};\n\nvar init = function init() {\n    var _this = this;\n    var result = mapNodes(_this.$context, function (container, node) {});\n\n    console.log(\"CALLED $init\", result);\n\n    return result;\n};\n\nvar render = function render() {\n    var _this = this;\n\n    //Render DOM\n    /*crawlNodes(_this.$context, node => {\n        return eachDirective(\n            node, [{\n                name: \"ignore\",\n                fn: () => {\n                    return false;\n                }\n            }, {\n                name: \"if\",\n                fn: (name, nameSecondary, value) => {\n                    return renderIf(_this, node, value);\n                }\n            }, {\n                name: \"model\",\n                fn: (name, nameSecondary, value) => {\n                    return renderModel(_this, node, value);\n                }\n            }, {\n                name: \"bind\",\n                fn: (name, nameSecondary, value) => {\n                    return renderBind(_this, node, nameSecondary, value);\n                }\n            }]\n        );\n    });*/\n\n    console.log(\"CALLED $render\");\n};\n\n/**\n * Basic Axon Constructor\n *\n * @constructor\n * @param {String} id To identify the instance\n * @returns {Object} Returns Axon instance\n */\nvar Axon = function Axon(config) {\n    var _this = this;\n\n    _this.$context = document.querySelector(config.context);\n    _this.$data = config.data;\n    _this.$methods = config.methods;\n\n    _this.$cache = _this.$init();\n    _this.$render();\n};\n\n/**\n * Expose Axon methods\n */\nAxon.prototype = {\n    $init: init,\n    $render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n"]}