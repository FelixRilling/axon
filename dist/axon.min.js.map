{"version":3,"sources":["axon.js"],"names":["Axon","LIB_STRING_QUOTES","DOM_EVENT_TIMEOUT","DOM_ATTR_PREFIX","DOM_ATTR_HIDDEN","DOM_EVENT_MODEL","TYPE_NAME_UNDEFINED","TYPE_NAME_FUNCTION","eachDirective","node","namesList","names","map","item","name","attrArr","Array","from","attributes","result","forEach","attr","substr","length","splitName","replace","split","nameIndex","indexOf","fn","value","crawlNodes","entry","recurseNodes","childElementCount","childArr","children","childNode","debounce","wait","immediate","timeout","context","this","args","arguments","callNow","later","apply","clearTimeout","setTimeout","_typeof","Symbol","iterator","obj","constructor","prototype","getNodeValueType","textContent","bindEvent","eventType","eventFn","eventArgs","instance","debouncedFn","nodeValueType","eventFnWrapper","event","target","push","addEventListener","retrieveProp","expression","splitExpression","val","reference","container","$data","prop","propPath","index","Error","evaluateExpression","isNaN","Number","includes","method","retrieveMethod","expressionSplit","methodName","methodArgs","filter","arg","methodFn","$methods","initOn","targetMethod","initModel","propName","targetProp","currentValue","newValue","$render","init","_this","$context","nameSecondary","console","log","renderIf","propValue","Boolean","removeAttribute","setAttribute","renderModel","renderBind","bindType","render","config","document","querySelector","data","methods","$init"],"mappings":"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","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.12.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\nvar LIB_STRING_QUOTES = [\"'\", \"\\\"\", \"`\"];\n\nvar DOM_EVENT_TIMEOUT = 20; //event timeout in ms\nvar DOM_ATTR_PREFIX = \"x-\";\nvar DOM_ATTR_HIDDEN = \"hidden\";\nvar DOM_EVENT_MODEL = \"input\";\n\nvar TYPE_NAME_UNDEFINED = \"undefined\";\nvar TYPE_NAME_FUNCTION = \"function\";\n\nvar eachDirective = function eachDirective(node, namesList) {\n    var names = namesList.map(function (item) {\n        return item.name;\n    });\n    var attrArr = Array.from(node.attributes);\n    var result = true;\n\n    attrArr.forEach(function (attr) {\n        //If is Axon attribute\n        if (attr.name.substr(0, DOM_ATTR_PREFIX.length) === DOM_ATTR_PREFIX) {\n            var splitName = attr.name.replace(DOM_ATTR_PREFIX, \"\").split(\":\");\n            var nameIndex = names.indexOf(splitName[0]);\n\n            //If name is allowed\n            if (nameIndex !== -1) {\n                result = namesList[nameIndex].fn(splitName[0], splitName[1], attr.value);\n            }\n        }\n    });\n\n    return result;\n};\n\nvar crawlNodes = function crawlNodes(entry, fn) {\n    var recurseNodes = function recurseNodes(node, fn) {\n        var result = fn(node);\n\n        if (result && node.childElementCount) {\n            var childArr = Array.from(node.children);\n\n            childArr.forEach(function (childNode) {\n                result = recurseNodes(childNode, fn);\n            });\n        }\n\n        return result;\n    };\n\n    return recurseNodes(entry, fn);\n};\n\nvar debounce = function debounce(fn, wait, immediate) {\n    var timeout = void 0;\n\n    return function () {\n        var context = this;\n        var args = Array.from(arguments);\n        var callNow = immediate && !timeout;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                fn.apply(context, args);\n            }\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            fn.apply(context, args);\n        }\n    };\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar getNodeValueType = function getNodeValueType(node) {\n    if (_typeof(node.value) !== TYPE_NAME_UNDEFINED) {\n        return \"value\";\n    } else if (_typeof(node.textContent) !== TYPE_NAME_UNDEFINED) {\n        return \"textContent\";\n    } else {\n        return \"innerHTML\";\n    }\n};\n\nvar bindEvent = function bindEvent(node, eventType, eventFn, eventArgs, instance) {\n    var debouncedFn = debounce(eventFn, DOM_EVENT_TIMEOUT);\n    var nodeValueType = getNodeValueType(node);\n\n    var eventFnWrapper = function eventFnWrapper(event) {\n        var target = event.target;\n        var args = Array.from(eventArgs);\n\n        args.push(target[nodeValueType], target, event);\n\n        return debouncedFn.apply(instance, args);\n    };\n\n    return node.addEventListener(eventType, eventFnWrapper, false);\n};\n\nvar retrieveProp = function retrieveProp(instance, expression) {\n    var splitExpression = expression.split(\".\");\n    var result = {\n        val: null,\n        reference: null\n    };\n    var container = instance.$data;\n    var prop = void 0;\n\n    splitExpression.forEach(function (propPath, index) {\n        prop = container[propPath];\n\n        if ((typeof prop === \"undefined\" ? \"undefined\" : _typeof(prop)) !== TYPE_NAME_UNDEFINED) {\n\n            if (index < splitExpression.length - 1) {\n                container = prop;\n            } else {\n                result.val = prop;\n                result.reference = container;\n            }\n        } else {\n            throw new Error(\"prop '\" + expression + \"' not found\");\n        }\n    });\n\n    return result;\n};\n\nvar evaluateExpression = function evaluateExpression(instance, expression) {\n    if (!isNaN(Number(expression))) {\n        //expression is a Number\n        return Number(expression);\n    } else if (LIB_STRING_QUOTES.includes(expression.substr(0, 1))) {\n        //expression is a String\n        return expression.substr(1, expression.length - 2);\n    } else if (expression.substr(expression.length - 1) === \")\") {\n        //expression is a Method\n        var method = retrieveMethod(instance, expression);\n\n        return method.fn.apply(instance, method.args);\n    } else {\n        //expression is a Property\n        return retrieveProp(instance, expression).val;\n    }\n};\n\nvar retrieveMethod = function retrieveMethod(instance, expression) {\n    var expressionSplit = expression.substr(0, expression.length - 1).split(\"(\");\n    var methodName = expressionSplit[0];\n    var methodArgs = expressionSplit[1].split(\",\").filter(function (item) {\n        return item !== \"\";\n    }).map(function (arg) {\n        return evaluateExpression(instance, arg);\n    });\n    var methodFn = instance.$methods[methodName];\n\n    if ((typeof methodFn === \"undefined\" ? \"undefined\" : _typeof(methodFn)) === TYPE_NAME_FUNCTION) {\n        return {\n            fn: methodFn,\n            args: methodArgs\n        };\n    } else {\n        throw new Error(\"method '\" + methodName + \"' is not a function\");\n    }\n};\n\nvar initOn = function initOn(instance, node, eventType, methodName) {\n    var targetMethod = retrieveMethod(instance, methodName);\n\n    bindEvent(node, eventType, targetMethod.fn, targetMethod.args, instance);\n\n    return true;\n};\n\nvar initModel = function initModel(instance, node, propName) {\n    var targetProp = retrieveProp(instance, propName);\n    var eventFn = function eventFn(currentValue, newValue) {\n        targetProp.reference[propName] = newValue;\n\n        setTimeout(function () {\n            instance.$render();\n        }, DOM_EVENT_TIMEOUT);\n    };\n\n    bindEvent(node, DOM_EVENT_MODEL, eventFn, [targetProp.val], instance);\n\n    return true;\n};\n\nvar init = function init() {\n    var _this = this;\n\n    //Bind events\n    crawlNodes(_this.$context, function (node) {\n        return eachDirective(node, [{\n            name: \"on\",\n            fn: function fn(name, nameSecondary, value) {\n                return initOn(_this, node, nameSecondary, value);\n            }\n        }, {\n            name: \"model\",\n            fn: function fn(name, nameSecondary, value) {\n                return initModel(_this, node, value);\n            }\n        }]);\n    });\n\n    console.log(\"CALLED $init\");\n};\n\nvar renderIf = function renderIf(instance, node, expression) {\n    var propValue = evaluateExpression(instance, expression);\n    var result = Boolean(propValue);\n\n    if (result) {\n        node.removeAttribute(DOM_ATTR_HIDDEN);\n    } else {\n        node.setAttribute(DOM_ATTR_HIDDEN, DOM_ATTR_HIDDEN);\n    }\n\n    return result;\n};\n\nvar renderModel = function renderModel(instance, node, propName) {\n    var nodeValueType = getNodeValueType(node);\n    var propValue = retrieveProp(instance, propName);\n\n    node[nodeValueType] = propValue.val;\n\n    return true;\n};\n\nvar renderBind = function renderBind(instance, node, bindType, expression) {\n    var propValue = evaluateExpression(instance, expression);\n\n    node.setAttribute(bindType, propValue);\n\n    return true;\n};\n\nvar render = function render() {\n    var _this = this;\n\n    //Render DOM\n    crawlNodes(_this.$context, function (node) {\n        return eachDirective(node, [{\n            name: \"ignore\",\n            fn: function fn() {\n                return false;\n            }\n        }, {\n            name: \"if\",\n            fn: function fn(name, nameSecondary, value) {\n                return renderIf(_this, node, value);\n            }\n        }, {\n            name: \"model\",\n            fn: function fn(name, nameSecondary, value) {\n                return renderModel(_this, node, value);\n            }\n        }, {\n            name: \"bind\",\n            fn: function fn(name, nameSecondary, value) {\n                return renderBind(_this, node, nameSecondary, value);\n            }\n        }]);\n    });\n\n    console.log(\"CALLED $render\");\n};\n\n/**\n * Basic Axon Constructor\n *\n * @constructor\n * @param {String} id To identify the instance\n * @returns {Object} Returns Axon instance\n */\nvar Axon = function Axon(config) {\n    var _this = this;\n\n    _this.$context = document.querySelector(config.context);\n    _this.$data = config.data;\n    _this.$methods = config.methods;\n\n    _this.$init();\n    _this.$render();\n};\n\n/**\n * Expose Axon methods\n */\nAxon.prototype = {\n    $init: init,\n    $render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}