{"version":3,"sources":["axon.js"],"names":["Axon","extend","type","cf","_this","this","name","deps","fn","provider","constructModule","_module","list","constructorFunction","dependencies","result","forEach","item","dependency","push","rdy","recurseDependencies","chev","get","Error","initialize","init","entry","set","access","_window","window","_document","document","_domNameSpace","constructQuery","val","queryDirective","context","multi","arguments","length","undefined","query","querySelectorAll","querySelector","model","onBind","ctrl","onDigest","plugins","bindDirectives","directive","controller","unshift","Function","prototype","bind","apply","$context","$directives","console","log","id","$id","Map","call"],"mappings":"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","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.4.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\n/**\r\n * Adds a new module type to the Chevron instance\r\n * @param {String} type The name of the type\r\n * @param {Function} cf Constructor function to init the module with\r\n * @returns {Object} Chevron instance\r\n */\n\nvar extend = function extend(type, cf) {\n    var _this = this;\n\n    //Add customType method to container\n    _this[type] = function (name, deps, fn) {\n        return _this.provider(type, //static\n        cf, //static\n        name, //dynamic\n        deps, //dynamic\n        fn //dynamic\n        );\n    };\n\n    return _this;\n};\n\n/**\r\n * Collects dependencies and initializes module\r\n * @private\r\n * @param {Object} _module The module to check\r\n * @param {Object} list The list of dependencies\r\n * @param {Function} cf The Constructor function\r\n * @returns {Object} Initialized _module\r\n */\n\nvar constructModule = function constructModule(_module, list, constructorFunction) {\n    var dependencies = [];\n    var result = void 0;\n\n    //Collect an ordered Array of dependencies\n    _module.deps.forEach(function (item) {\n        var dependency = list[item];\n\n        //If the dependency name is found in the list of deps, add it\n        if (dependency) {\n            dependencies.push(dependency.fn);\n        }\n    });\n\n    //Call Constructor fn with _module/deps\n    result = constructorFunction(_module, dependencies);\n    result.rdy = true;\n\n    return result;\n};\n\n/**\r\n * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\r\n * @private\r\n * @param {Object} chev The chevron container\r\n * @param {Array} _module The module to recurse\r\n * @param {Function} fn The function run over each dependency\r\n */\n\nvar recurseDependencies = function recurseDependencies(chev, _module, fn) {\n    _module.deps.forEach(function (name) {\n        var dependency = chev.get(name);\n\n        if (dependency) {\n            //recurse over sub-deps\n            recurseDependencies(chev, dependency, fn);\n            //run fn\n            fn(dependency);\n        } else {\n            //if the dependency is not found, throw error with name\n            throw new Error(_module.name + \" is missing dep '\" + name + \"'\");\n        }\n    });\n};\n\n/**\r\n * Inits module and all dependencies\n * @private\r\n * @param {Object} chev The chevron container\r\n * @param {Object} _module The module to prepare\r\n * @param {Function} cf The constructor function\r\n * @returns {Object} Initialized module\r\n */\nvar initialize = function initialize(chev, _module, constructorFunction) {\n    var list = {};\n\n    //Recurse trough _module deps\n    recurseDependencies(chev, _module,\n    //run this over every dependency to add it to the dependencyList\n    function (dependency) {\n        //make sure if dependency is initialized, then add\n        list[dependency.name] = dependency.rdy ? dependency : dependency.init();\n    });\n\n    return constructModule(_module, list, constructorFunction);\n};\n\n/**\r\n * Adds a new module to the container\r\n * @param {String} type The type of the module. ex: \"factory\"\r\n * @param {Function} cf The constructor function of the module\r\n * @param {String} name The name to register the module under. ex: \"myFactory\"\r\n * @param {Array} deps Array of dependenciy names\r\n * @param {Function} fn Content of the module\r\n * @returns {Object} Chevron instance\r\n */\nvar provider = function provider(type, constructorFunction, name, deps, fn) {\n    var _this = this;\n    var entry = {\n        type: type, //Type of the module\n        name: name, //Name of the module\n        deps: deps, //Array of dependencies\n        fn: fn, //Module content function\n        rdy: false, //If the module is ready to access\n        init: function init() {\n            return initialize(_this.chev, entry, constructorFunction); //init the module\n        }\n    };\n\n    //Saves entry to chev container\n    _this.chev.set(name, entry);\n\n    return _this;\n};\n\n/**\r\n * Access module with dependencies bound\r\n * @param {String} name The name of the module to access\r\n * @returns {Mixed} Initialized Object content\r\n */\n\nvar access = function access(name) {\n  return this.chev.get(name).init().fn;\n};\n\n/**\n * Store constants\n */\n\nvar _window = window;\nvar _document = _window.document;\nvar _domNameSpace = \"xn\";\n\n/**\r\n * Creates querySelector string\r\n *\r\n * @private\r\n * @param {String} name The data name\n * @param {String} val The data value\r\n * @return {String} Returns Query\r\n */\nvar constructQuery = function constructQuery(name, val) {\n    if (val) {\n        return \"[\" + _domNameSpace + \"-\" + name + \"='\" + val + \"']\";\n    } else {\n        return \"[\" + _domNameSpace + \"-\" + name + \"]\";\n    }\n};\n\n/**\r\n * Query Nodes with directives from DOM\n *\r\n * @private\n * @param {Node} context Node context to query\n * @param {String} name The data name\n * @param {String} val The data value\r\n * @param {Boolean} multi optional, if multiple should be queried\n * @return {NodeList} Returns NodeList\r\n */\nvar queryDirective = function queryDirective(context, name, val) {\n    var multi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    var query = constructQuery(name, val);\n\n    return multi ? context.querySelectorAll(query) : context.querySelector(query);\n};\n\n/*\nimport {\n    _window\n} from \"../../../constants\";\nimport {\n    eachNode\n} from \"../../../util\";\n\nimport queryDirective from \"../../../dom/query/directives/query\";\nimport readDirective from \"../../../dom/query/directives/read\";\nimport digest from \"../../../dom/digest/digest\";\nimport bind from \"../../../dom/bind/bind\";\n*/\n\nvar model = {\n    onBind: function onBind(ctrl) {\n        /*const result = [];\r\n        const elements = queryDirective(\"model\", \"*\", context);\r\n          bind(elements, \"change\", modelEvent);\r\n        bind(elements, \"input\", modelEvent);\r\n          eachNode(elements, (element, index) => {\r\n            result.push({\r\n                index,\r\n                element,\r\n                type: \"model\",\r\n                value: readDirective(element, \"model\")\r\n            });\r\n        });\r\n          return result;\r\n          function modelEvent(ev, dom) {\r\n            _window.setTimeout(() => {\r\n                const content = dom.value;\r\n                const modelFor = readDirective(dom, \"model\");\r\n                  console.log(\"MODEL:\", modelFor, content);\r\n                ctrl[modelFor] = content;\r\n                  digest(ctrl);\r\n            }, 5);\r\n        }*/\n\n        return true;\n    },\n    onDigest: function onDigest(ctrl, entry) {\n        //entry.element.value = ctrl[entry.value];\n        return true;\n    }\n};\n\n//import changeImported from \"./change\";\n\nvar plugins = [model];\n\n/**\r\n * Binds directives to controller\r\n *\r\n * @private\r\n * @param {Object} ctrl The Controller\r\n * @return {Object} Returns bound Object\r\n */\nvar bindDirectives = function bindDirectives(ctrl) {\n    var result = [];\n\n    plugins.forEach(function (directive) {\n        result.push(directive.onBind(ctrl));\n    });\n\n    return result;\n};\n\n//import bindExpressions from \"../dom/bind/expressions\";\n//import digest from \"../dom/digest/digest\";\n\n/**\r\n * Constructor function for the controller type\r\n * @private\r\n * @param {Object} _module The module object\r\n * @param {Array} dependencies Array of dependency contents\r\n * @returns {Mixed} Initialized module\r\n */\nvar controller = function controller(_module, dependencies) {\n    var _this = this;\n\n    //First value gets ignored by calling 'new' like this, so we need to fill it with something\n    dependencies.unshift(0);\n\n    //Apply into new constructor by binding applying the bind method.\n    //@see: {@link http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible }\n    _module.fn = new (Function.prototype.bind.apply(_module.fn, dependencies))();\n\n    //Bind Context\n    _module.fn.$context = queryDirective(_this.$context, \"controller\", _module.name, false);\n    //ctrl.$expressions = bindExpressions(_module.fn);\n    _module.fn.$directives = bindDirectives(_module.fn);\n    //run first digest\n    //digest(_module.fn);\n\n    console.log(\"mainCtrl\", _module.fn);\n\n    return _module;\n};\n\n//Chevron import\n\n//Axon import\n/**\r\n * Basic Axon Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Axon instance\r\n */\nvar Axon = function Axon(id) {\n    var _this = this;\n\n    //Instance Id\n    _this.$id = id;\n\n    //Instance container\n    _this.chev = new Map();\n\n    //context\n    _this.$context = queryDirective(_document, \"app\", id, false);\n\n    //Init default types\n    _this.extend.call(_this, \"controller\", controller.bind(_this));\n\n    console.log(\"myApp\", _this);\n};\n\n/**\r\n * Expose Axon methods\r\n */\nAxon.prototype = {\n    extend: extend, //Creates a new module type\n    provider: provider, //Adds a new custom module to the container\n    access: access //Returns initialized module\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}