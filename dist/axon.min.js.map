{"version":3,"sources":["axon.js"],"names":["Axon","eachNode","nodeList","fn","l","length","i","eachAttribute","namedNodeMap","item","name","value","_document","document","DOM_PREFIX","crawlNodes","entry","recurseNodes","node","children","result","childNode","getDirectives","allowedNames","attributes","attributeName","attributeValue","substr","splitName","replace","split","indexOf","bindEventString","eventType","eventFnString","instance","eventFnStringSplit","eventFnName","eventFnArgs","map","Number","eventFnTarget","$methods","Error","eventFn","e","args","Array","from","push","call","addEventListener","init","_this","this","$context","render","appConfig","querySelector","context","$data","data","methods","prototype","constructor"],"mappings":"AAMA,GAAIA,MAAQ,WACZ,YAeA,SAASC,GAASC,EAAUC,GAIxB,IAHA,GAAIC,GAAIF,EAASG,OACbC,EAAI,EAEDA,EAAIF,GACPD,EAAGD,EAASI,GAAIA,GAChBA,IAsBR,QAASC,GAAcC,EAAcL,GAIjC,IAHA,GAAIC,GAAII,EAAaH,OACjBC,EAAI,EAEDA,EAAIF,GAAG,CACV,GAAIK,GAAOD,EAAaC,KAAKH,EAE7BH,GAAGM,EAAKC,KAAMD,EAAKE,MAAOL,GAC1BA,KAjDR,GAAIM,GAAYC,SAEZC,EAAa,KAmDbC,EAAa,SAAoBC,EAAOb,GACxC,GAAIc,GAAe,QAASA,GAAaC,EAAMf,GAC3C,GAAIgB,GAAWD,EAAKC,QAEpB,IAAIA,GAAYA,EAASd,OAAS,EAAG,CACjC,GAAIe,IAAS,CAMb,OAJAA,GAASnB,EAASkB,EAAU,SAAUE,GAClC,MAAOJ,GAAaI,EAAWlB,KAKnC,MAAOA,GAAGe,GAIlB,OAAOD,GAAaD,EAAOb,IAG3BmB,EAAgB,SAAuBJ,EAAMK,EAAcpB,GAC3DI,EAAcW,EAAKM,WAAY,SAAUC,EAAeC,GAGpD,GAAID,EAAcE,OAAO,EAAGb,EAAWT,UAAYS,EAAY,CAC3D,GAAIc,GAAYH,EAAcI,QAAQf,EAAY,IAAIgB,MAAM,IAGxDP,GAAaQ,QAAQH,EAAU,OAAQ,GACvCzB,EAAGyB,EAAU,GAAIA,EAAU,GAAIF,OAM3CM,EAAkB,SAAyBd,EAAMe,EAAWC,EAAeC,GAG3E,GAAIC,GAAqBF,EAAcP,OAAO,EAAGO,EAAc7B,OAAS,GAAGyB,MAAM,KAC7EO,EAAcD,EAAmB,GACjCE,EAAcF,EAAmB,GAAGN,MAAM,KAAKS,IAAIC,QACnDC,EAAgBN,EAASO,SAASL,EAEtC,IAA6B,kBAAlBI,GAUP,KAAM,IAAIE,OAAM,aAAeN,EAAc,cAT7C,IAAIO,GAAU,SAAiBC,GAC3B,GAAIC,GAAOC,MAAMC,KAAKV,EAEtBA,GAAYW,KAAKJ,GACjBJ,EAAcS,KAAKf,EAAUW,GAGjC5B,GAAKiC,iBAAiBlB,EAAWW,GAAS,IAM9CQ,EAAO,WACP,GAAIC,GAAQC,IAEZ,OAAOvC,GAAWsC,EAAME,SAAU,SAAUrC,GACxCI,EAAcJ,GAAO,MAAO,SAAUR,EAAMuB,EAAWC,GACnDF,EAAgBd,EAAMe,EAAWC,EAAemB,QAKxDG,EAAS,aAWTxD,EAAO,SAAcyD,GACrB,GAAIJ,GAAQC,IAEZD,GAAME,SAAW3C,EAAU8C,cAAcD,EAAUE,SACnDN,EAAMO,MAAQH,EAAUI,KACxBR,EAAMX,SAAWe,EAAUK,QAE3BT,EAAMD,OACNC,EAAMG,SAYV,OANAxD,GAAK+D,WACDX,KAAMA,EACNI,OAAQA,EACRQ,YAAahE,GAGVA","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.6.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\nvar _document = document;\n\nvar DOM_PREFIX = \"x-\";\n\n/**\n * iterate over NodeList\n *\n * @private\n * @param {NodeList} nodeList The nodeList to iterate over\n * @param {Function} fn The Function to call\n * @returns void\n */\n\nfunction eachNode(nodeList, fn) {\n    var l = nodeList.length;\n    var i = 0;\n\n    while (i < l) {\n        fn(nodeList[i], i);\n        i++;\n    }\n}\n\n/**\n * Iterate over Object\n *\n * @private\n * @param {Object} object The Object to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\n\n\n/**\n * Iterate over NamedNodeMap\n *\n * @private\n * @param {NamedNodeMap} namedNodeMap The NamedNodeMap to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\nfunction eachAttribute(namedNodeMap, fn) {\n    var l = namedNodeMap.length;\n    var i = 0;\n\n    while (i < l) {\n        var item = namedNodeMap.item(i);\n\n        fn(item.name, item.value, i);\n        i++;\n    }\n}\n\nvar crawlNodes = function crawlNodes(entry, fn) {\n    var recurseNodes = function recurseNodes(node, fn) {\n        var children = node.children;\n\n        if (children && children.length > 0) {\n            var result = true;\n\n            result = eachNode(children, function (childNode) {\n                return recurseNodes(childNode, fn);\n            });\n\n            return result;\n        } else {\n            return fn(node);\n        }\n    };\n\n    return recurseNodes(entry, fn);\n};\n\nvar getDirectives = function getDirectives(node, allowedNames, fn) {\n    eachAttribute(node.attributes, function (attributeName, attributeValue) {\n\n        //If is Axon attribute\n        if (attributeName.substr(0, DOM_PREFIX.length) === DOM_PREFIX) {\n            var splitName = attributeName.replace(DOM_PREFIX, \"\").split(\":\");\n\n            //If name is allowed\n            if (allowedNames.indexOf(splitName[0]) !== -1) {\n                fn(splitName[0], splitName[1], attributeValue);\n            }\n        }\n    });\n};\n\nvar bindEventString = function bindEventString(node, eventType, eventFnString, instance) {\n    //@TODO make this safer\n    //Split up function string\n    var eventFnStringSplit = eventFnString.substr(0, eventFnString.length - 1).split(\"(\");\n    var eventFnName = eventFnStringSplit[0];\n    var eventFnArgs = eventFnStringSplit[1].split(\",\").map(Number);\n    var eventFnTarget = instance.$methods[eventFnName];\n\n    if (typeof eventFnTarget === \"function\") {\n        var eventFn = function eventFn(e) {\n            var args = Array.from(eventFnArgs);\n\n            eventFnArgs.push(e);\n            eventFnTarget.call(instance, args);\n        };\n\n        node.addEventListener(eventType, eventFn, false);\n    } else {\n        throw new Error(\"Event fn '\" + eventFnName + \"' not found\");\n    }\n};\n\nvar init = function init() {\n    var _this = this;\n\n    return crawlNodes(_this.$context, function (node) {\n        getDirectives(node, [\"on\"], function (name, eventType, eventFnString) {\n            bindEventString(node, eventType, eventFnString, _this);\n        });\n    });\n};\n\nvar render = function render() {\n    var _this = this;\n};\n\n/**\r\n * Basic Axon Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Axon instance\r\n */\nvar Axon = function Axon(appConfig) {\n    var _this = this;\n\n    _this.$context = _document.querySelector(appConfig.context);\n    _this.$data = appConfig.data;\n    _this.$methods = appConfig.methods;\n\n    _this.init();\n    _this.render();\n};\n\n/**\r\n * Expose Axon methods\r\n */\nAxon.prototype = {\n    init: init,\n    render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}