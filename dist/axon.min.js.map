{"version":3,"sources":["axon.js"],"names":["Axon","eachNode","nodeList","fn","l","length","i","eachAttribute","namedNodeMap","item","name","value","_document","document","DOM_PREFIX","DEBOUNCE_TIMEOUT","crawlNodes","entry","recurseNodes","node","children","result","childNode","eachDirective","allowedNames","attributes","attributeName","attributeValue","substr","splitName","replace","split","indexOf","secondary","debounce","wait","immediate","timeout","context","this","args","Array","from","arguments","callNow","later","apply","clearTimeout","setTimeout","bindEvent","eventType","eventFn","eventArgs","instance","debouncedFn","eventFnWrapper","e","push","addEventListener","retrieveProp","propName","castNumber","Number","stringChars","isNaN","includes","prop","$data","Error","retrieveMethod","methodString","methodStringSplit","methodName","methodArgs","filter","map","arg","methodFn","$methods","init","_this","$context","directive","targetMethod","console","log","render","appConfig","querySelector","data","methods","$init","$render","prototype","constructor"],"mappings":"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","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.6.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\nvar _document = document;\n\nvar DOM_PREFIX = \"x-\";\nvar DEBOUNCE_TIMEOUT = 40; //event timeout in ms\n\n/**\n * Iterate over Object\n *\n * @private\n * @param {Object} object The Object to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\n\n\n\n/**\n * iterate over NodeList\n *\n * @private\n * @param {NodeList} nodeList The nodeList to iterate over\n * @param {Function} fn The Function to call\n * @returns void\n */\nfunction eachNode(nodeList, fn) {\n    var l = nodeList.length;\n    var i = 0;\n\n    while (i < l) {\n        fn(nodeList[i], i);\n        i++;\n    }\n}\n\n/**\n * Iterate over NamedNodeMap\n *\n * @private\n * @param {NamedNodeMap} namedNodeMap The NamedNodeMap to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\nfunction eachAttribute(namedNodeMap, fn) {\n    var l = namedNodeMap.length;\n    var i = 0;\n\n    while (i < l) {\n        var item = namedNodeMap.item(i);\n\n        fn(item.name, item.value, i);\n        i++;\n    }\n}\n\nvar crawlNodes = function crawlNodes(entry, fn) {\n    var recurseNodes = function recurseNodes(node, fn) {\n        var children = node.children;\n\n        if (children && children.length > 0) {\n            var result = true;\n\n            result = eachNode(children, function (childNode) {\n                return recurseNodes(childNode, fn);\n            });\n\n            return result;\n        } else {\n            return fn(node);\n        }\n    };\n\n    return recurseNodes(entry, fn);\n};\n\nvar eachDirective = function eachDirective(node, allowedNames, fn) {\n    eachAttribute(node.attributes, function (attributeName, attributeValue) {\n\n        //If is Axon attribute\n        if (attributeName.substr(0, DOM_PREFIX.length) === DOM_PREFIX) {\n            var splitName = attributeName.replace(DOM_PREFIX, \"\").split(\":\");\n\n            //If name is allowed\n            if (allowedNames.indexOf(splitName[0]) !== -1) {\n                fn({\n                    name: splitName[0],\n                    secondary: splitName[1],\n                    value: attributeValue\n                });\n            }\n        }\n    });\n};\n\nvar debounce = function debounce(fn, wait, immediate) {\n    var timeout = void 0;\n\n    return function () {\n        var context = this;\n        var args = Array.from(arguments);\n        var callNow = immediate && !timeout;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                fn.apply(context, args);\n            }\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            fn.apply(context, args);\n        }\n    };\n};\n\nvar bindEvent = function bindEvent(node, eventType, eventFn, eventArgs, instance) {\n    var debouncedFn = debounce(eventFn, DEBOUNCE_TIMEOUT);\n    var eventFnWrapper = function eventFnWrapper(e) {\n        var args = Array.from(eventArgs);\n\n        args.push(e);\n\n        return debouncedFn.apply(instance, args);\n    };\n\n    return node.addEventListener(eventType, eventFnWrapper, false);\n};\n\nvar retrieveProp = function retrieveProp(instance, propName) {\n    var castNumber = Number(propName);\n    var stringChars = [\"'\", \"\\\"\", \"`\"];\n\n    if (!isNaN(castNumber)) {\n        //If number\n        return castNumber;\n    } else if (stringChars.includes(propName[0])) {\n        //If String\n        return propName.substr(1, propName.length - 2);\n    } else {\n        //If prop\n        var prop = instance.$data[propName];\n\n        if (typeof prop === \"undefined\") {\n            throw new Error(\"prop '\" + propName + \"' not found\");\n        } else {\n            return prop;\n        }\n    }\n\n    return null;\n};\n\nvar retrieveMethod = function retrieveMethod(instance, methodString) {\n    var methodStringSplit = methodString.substr(0, methodString.length - 1).split(\"(\");\n    var methodName = methodStringSplit[0];\n    var methodArgs = methodStringSplit[1].split(\",\").filter(function (item) {\n        return item !== \"\";\n    }).map(function (arg) {\n        return retrieveProp(instance, arg);\n    });\n\n    var methodFn = instance.$methods[methodName];\n\n    if (typeof methodFn !== \"function\") {\n        throw new Error(\"method '\" + methodName + \"' not found\");\n    } else {\n        return {\n            fn: methodFn,\n            args: methodArgs\n        };\n    }\n};\n\nvar init = function init() {\n    var _this = this;\n\n    //Bind events\n    crawlNodes(_this.$context, function (node) {\n        eachDirective(node, [\"on\"], function (directive) {\n            var targetMethod = retrieveMethod(_this, directive.value);\n\n            bindEvent(node, directive.secondary, targetMethod.fn, targetMethod.args, _this);\n        });\n    });\n\n    console.log(\"CALLED $init\");\n};\n\nvar render = function render() {\n    var _this = this;\n\n    console.log(\"CALLED $render\");\n};\n\n/**\r\n * Basic Axon Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Axon instance\r\n */\nvar Axon = function Axon(appConfig) {\n    var _this = this;\n\n    _this.$context = _document.querySelector(appConfig.context);\n    _this.$data = appConfig.data;\n    _this.$methods = appConfig.methods;\n\n    _this.$init();\n    _this.$render();\n};\n\n/**\r\n * Expose Axon methods\r\n */\nAxon.prototype = {\n    $init: init,\n    $render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}