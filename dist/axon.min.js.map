{"version":3,"sources":["axon.js"],"names":["Axon","eachNode","nodeList","fn","l","length","i","_document","document","crawlNodes","entry","recurseNodes","node","children","result","childNode","init","_this","this","$context","console","log","render","appConfig","querySelector","context","$data","data","$methods","methods","prototype","constructor"],"mappings":"AAMA,GAAIA,MAAQ,WACZ,YAkBA,SAASC,GAASC,EAAUC,GAIxB,IAHA,GAAIC,GAAIF,EAASG,OACbC,EAAI,EAEDA,EAAIF,GACPD,EAAGD,EAASI,GAAIA,GAChBA,IAjBR,GAAIC,GAAYC,SA8BZC,EAAa,SAAoBC,EAAOP,GACxC,GAAIQ,GAAe,QAASA,GAAaC,EAAMT,GAC3C,GAAIU,GAAWD,EAAKC,QAEpB,IAAIA,GAAYA,EAASR,OAAS,EAAG,CACjC,GAAIS,IAAS,CAMb,OAJAA,GAASb,EAASY,EAAU,SAAUE,GAClC,MAAOJ,GAAaI,EAAWZ,KAKnC,MAAOA,GAAGS,GAIlB,OAAOD,GAAaD,EAAOP,IAG3Ba,EAAO,WACP,GAAIC,GAAQC,IAEZT,GAAWQ,EAAME,SAAU,SAAUP,GAGjC,MAFAQ,SAAQC,IAAI,IAAKT,IAEV,KAIXU,EAAS,aAWTtB,EAAO,SAAcuB,GACrB,GAAIN,GAAQC,IAEZD,GAAME,SAAWZ,EAAUiB,cAAcD,EAAUE,SACnDR,EAAMS,MAAQH,EAAUI,KACxBV,EAAMW,SAAWL,EAAUM,QAE3BZ,EAAMD,OACNC,EAAMK,SAYV,OANAtB,GAAK8B,WACDd,KAAMA,EACNM,OAAQA,EACRS,YAAa/B,GAGVA","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.6.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\n/**\r\n * Store constants\r\n */\n\n\nvar _document = document;\n\n/**\n * iterate over NodeList\n *\n * @private\n * @param {NodeList} nodeList The nodeList to iterate over\n * @param {Function} fn The Function to call\n * @returns void\n */\n\nfunction eachNode(nodeList, fn) {\n    var l = nodeList.length;\n    var i = 0;\n\n    while (i < l) {\n        fn(nodeList[i], i);\n        i++;\n    }\n}\n\n/**\n * Iterate over Object\n *\n * @private\n * @param {Object} object The Object to iterate over\n * @param {Function} fn The Function to run\n * @returns void\n */\n\nvar crawlNodes = function crawlNodes(entry, fn) {\n    var recurseNodes = function recurseNodes(node, fn) {\n        var children = node.children;\n\n        if (children && children.length > 0) {\n            var result = true;\n\n            result = eachNode(children, function (childNode) {\n                return recurseNodes(childNode, fn);\n            });\n\n            return result;\n        } else {\n            return fn(node);\n        }\n    };\n\n    return recurseNodes(entry, fn);\n};\n\nvar init = function init() {\n    var _this = this;\n\n    crawlNodes(_this.$context, function (node) {\n        console.log(\"N\", node);\n\n        return true;\n    });\n};\n\nvar render = function render() {\n    var _this = this;\n};\n\n/**\r\n * Basic Axon Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Axon instance\r\n */\nvar Axon = function Axon(appConfig) {\n    var _this = this;\n\n    _this.$context = _document.querySelector(appConfig.context);\n    _this.$data = appConfig.data;\n    _this.$methods = appConfig.methods;\n\n    _this.init();\n    _this.render();\n};\n\n/**\r\n * Expose Axon methods\r\n */\nAxon.prototype = {\n    init: init,\n    render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}