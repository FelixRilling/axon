{"version":3,"sources":["axon.js"],"names":["Axon","mapNodes","entry","fn","result","recurseNodes","node","depth","container","children","childElementCount","childArr","Array","from","forEach","childNode","index","DOM_ATTR_PREFIX","getDirectives","attrArr","attributes","attr","name","substr","length","splitName","replace","split","push","key","opt","value","execDirectives","instance","domMap","mode","recurseMap","mapNode","console","log","child","init","_this","this","$cache","$context","directives","render","config","document","querySelector","context","$data","data","$methods","methods","$init","$render","prototype","constructor"],"mappings":"AAMA,GAAIA,MAAQ,WACZ,YAEA,IAAIC,GAAW,SAAkBC,EAAOC,GACpC,GAAIC,MACAC,EAAe,QAASA,GAAaC,EAAMC,EAAOC,GAKlD,GAJAA,EAAUF,KAAOA,EACjBE,EAAUC,YACVN,EAAGK,EAAWF,EAAMC,GAEhBD,EAAKI,kBAAmB,CACxB,GAAIC,GAAWC,MAAMC,KAAKP,EAAKG,SAE/BE,GAASG,QAAQ,SAAUC,EAAWC,GAClCR,EAAUC,SAASO,MAEnBX,EAAaU,EAAWR,EAAQ,EAAGC,EAAUC,SAASO,OAOlE,OAFAX,GAAaH,EAAO,EAAGE,GAEhBA,GAGPa,EAAkB,KAElBC,EAAgB,SAAuBZ,GACvC,GAAIa,GAAUP,MAAMC,KAAKP,EAAKc,YAC1BhB,IAeJ,OAbAe,GAAQL,QAAQ,SAAUO,GAEtB,GAAIA,EAAKC,KAAKC,OAAO,EAAGN,EAAgBO,UAAYP,EAAiB,CACjE,GAAIQ,GAAYJ,EAAKC,KAAKI,QAAQT,EAAiB,IAAIU,MAAM,IAE7DvB,GAAOwB,MACHC,IAAKJ,EAAU,GACfK,IAAKL,EAAU,KAAM,EACrBM,MAAOV,EAAKU,WAKjB3B,GAGP4B,EAAiB,SAAwBC,EAAUC,EAAQC,GAC3D,GAAIC,GAAa,QAASA,GAAWC,EAAS9B,GAC1C,GAAIE,GAAW4B,EAAQ5B,QAEvB6B,SAAQC,KAAKF,EAAS9B,IAElBE,EAASe,QACTf,EAASK,QAAQ,SAAU0B,GACvBJ,EAAWI,EAAOjC,EAAQ,KAOtC6B,GAAWF,EAAQ,IAGnBO,EAAO,WACP,GAAIC,GAAQC,IAEZD,GAAME,OAAS3C,EAASyC,EAAMG,SAAU,SAAUrC,EAAWF,GAEzD,GAAIwC,GAAa5B,EAAcZ,EAE/BE,GAAUsC,WAAaA,IAG3Bd,EAAeU,EAAOA,EAAME,OAAQ,GACpCN,QAAQC,IAAI,iBAGZQ,EAAS,WACT,GAAIL,GAAQC,IA6BZX,GAAeU,EAAOA,EAAME,OAAQ,GACpCN,QAAQC,IAAI,mBAUZvC,EAAO,SAAcgD,GACrB,GAAIN,GAAQC,IAEZD,GAAMG,SAAWI,SAASC,cAAcF,EAAOG,SAC/CT,EAAMU,MAAQJ,EAAOK,KACrBX,EAAMY,SAAWN,EAAOO,QACxBb,EAAME,UAENF,EAAMc,QACNd,EAAMe,UAYV,OANAzD,GAAK0D,WACDF,MAAOf,EACPgB,QAASV,EACTY,YAAa3D,GAGVA","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.12.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\nvar mapNodes = function mapNodes(entry, fn) {\n    var result = {};\n    var recurseNodes = function recurseNodes(node, depth, container) {\n        container.node = node;\n        container.children = [];\n        fn(container, node, depth);\n\n        if (node.childElementCount) {\n            var childArr = Array.from(node.children);\n\n            childArr.forEach(function (childNode, index) {\n                container.children[index] = {};\n\n                recurseNodes(childNode, depth + 1, container.children[index]);\n            });\n        }\n    };\n\n    recurseNodes(entry, 0, result);\n\n    return result;\n};\n\nvar DOM_ATTR_PREFIX = \"x-\";\n\nvar getDirectives = function getDirectives(node) {\n    var attrArr = Array.from(node.attributes);\n    var result = [];\n\n    attrArr.forEach(function (attr) {\n        //If is Axon attribute\n        if (attr.name.substr(0, DOM_ATTR_PREFIX.length) === DOM_ATTR_PREFIX) {\n            var splitName = attr.name.replace(DOM_ATTR_PREFIX, \"\").split(\":\");\n\n            result.push({\n                key: splitName[0],\n                opt: splitName[1] || false,\n                value: attr.value\n            });\n        }\n    });\n\n    return result;\n};\n\nvar execDirectives = function execDirectives(instance, domMap, mode) {\n    var recurseMap = function recurseMap(mapNode, depth) {\n        var children = mapNode.children;\n\n        console.log([mapNode, depth]);\n\n        if (children.length) {\n            children.forEach(function (child) {\n                recurseMap(child, depth + 1);\n            });\n        }\n    };\n\n    //console.log(instance, domMap, mode);\n\n    recurseMap(domMap, 0);\n};\n\nvar init = function init() {\n    var _this = this;\n\n    _this.$cache = mapNodes(_this.$context, function (container, node) {\n        //Cache all nodes & directives in the context\n        var directives = getDirectives(node);\n\n        container.directives = directives;\n    });\n\n    execDirectives(_this, _this.$cache, 0);\n    console.log(\"CALLED $init\");\n};\n\nvar render = function render() {\n    var _this = this;\n\n    //Render DOM\n    /*crawlNodes(_this.$context, node => {\n        return eachDirective(\n            node, [{\n                name: \"ignore\",\n                fn: () => {\n                    return false;\n                }\n            }, {\n                name: \"if\",\n                fn: (name, nameSecondary, value) => {\n                    return renderIf(_this, node, value);\n                }\n            }, {\n                name: \"model\",\n                fn: (name, nameSecondary, value) => {\n                    return renderModel(_this, node, value);\n                }\n            }, {\n                name: \"bind\",\n                fn: (name, nameSecondary, value) => {\n                    return renderBind(_this, node, nameSecondary, value);\n                }\n            }]\n        );\n    });*/\n\n    execDirectives(_this, _this.$cache, 1);\n    console.log(\"CALLED $render\");\n};\n\n/**\n * Basic Axon Constructor\n *\n * @constructor\n * @param {String} id To identify the instance\n * @returns {Object} Returns Axon instance\n */\nvar Axon = function Axon(config) {\n    var _this = this;\n\n    _this.$context = document.querySelector(config.context);\n    _this.$data = config.data;\n    _this.$methods = config.methods;\n    _this.$cache = {};\n\n    _this.$init();\n    _this.$render();\n};\n\n/**\n * Expose Axon methods\n */\nAxon.prototype = {\n    $init: init,\n    $render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}