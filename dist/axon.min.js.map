{"version":3,"sources":["axon.js"],"names":["Axon","init","_this","this","result","recurseNodes","node","parents","depth","container","console","log","children","childElementCount","childArr","Array","from","parrentsArr","push","forEach","childNode","index","$context","render","config","document","querySelector","context","$data","data","$methods","methods","$cache","$init","$render","prototype","constructor"],"mappings":"AAMA,GAAIA,MAAQ,WACZ,YAEA,IAAIC,GAAO,WACP,GAAIC,GAAQC,KACRC,EAAS,OACTC,EAAe,QAASA,GAAaC,EAAMC,EAASC,EAAOC,GAC3DC,QAAQC,KAAKL,EAAMC,EAASC,EAAOC,IACnCA,GACIH,KAAMA,EACNM,aAGAR,GAAUE,EAAKO,oBACf,WACI,GAAIC,GAAWC,MAAMC,KAAKV,EAAKM,UAC3BK,EAAcF,MAAMC,KAAKT,EAE7BU,GAAYC,KAAKZ,GAEjBQ,EAASK,QAAQ,SAAUC,EAAWC,GAClChB,EAAae,EAAWH,EAAaT,EAAQ,EAAGC,EAAUG,SAASS,SASnF,OAHAjB,GAASC,EAAaH,EAAMoB,YAAc,EAAGlB,GAE7CM,QAAQC,IAAI,eAAgBP,GACrBA,GAGPmB,EAAS,WA8BTb,QAAQC,IAAI,mBAUZX,EAAO,SAAcwB,GACrB,GAAItB,GAAQC,IAEZD,GAAMoB,SAAWG,SAASC,cAAcF,EAAOG,SAC/CzB,EAAM0B,MAAQJ,EAAOK,KACrB3B,EAAM4B,SAAWN,EAAOO,QAExB7B,EAAM8B,OAAS9B,EAAM+B,QACrB/B,EAAMgC,UAYV,OANAlC,GAAKmC,WACDF,MAAOhC,EACPiC,QAASX,EACTa,YAAapC,GAGVA","file":"axon.min.js","sourcesContent":["/**\n * Axon v0.12.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/axonjs.git\n */\n\nvar Axon = (function () {\n'use strict';\n\nvar init = function init() {\n    var _this = this;\n    var result = void 0;\n    var recurseNodes = function recurseNodes(node, parents, depth, container) {\n        console.log([node, parents, depth, container]);\n        container = {\n            node: node,\n            children: []\n        };\n\n        if (result && node.childElementCount) {\n            (function () {\n                var childArr = Array.from(node.children);\n                var parrentsArr = Array.from(parents);\n\n                parrentsArr.push(node);\n\n                childArr.forEach(function (childNode, index) {\n                    recurseNodes(childNode, parrentsArr, depth + 1, container.children[index]);\n                });\n            })();\n        }\n    };\n\n    result = recurseNodes(_this.$context, [], 0, result);\n\n    console.log(\"CALLED $init\", result);\n    return result;\n};\n\nvar render = function render() {\n    var _this = this;\n\n    //Render DOM\n    /*crawlNodes(_this.$context, node => {\n        return eachDirective(\n            node, [{\n                name: \"ignore\",\n                fn: () => {\n                    return false;\n                }\n            }, {\n                name: \"if\",\n                fn: (name, nameSecondary, value) => {\n                    return renderIf(_this, node, value);\n                }\n            }, {\n                name: \"model\",\n                fn: (name, nameSecondary, value) => {\n                    return renderModel(_this, node, value);\n                }\n            }, {\n                name: \"bind\",\n                fn: (name, nameSecondary, value) => {\n                    return renderBind(_this, node, nameSecondary, value);\n                }\n            }]\n        );\n    });*/\n\n    console.log(\"CALLED $render\");\n};\n\n/**\n * Basic Axon Constructor\n *\n * @constructor\n * @param {String} id To identify the instance\n * @returns {Object} Returns Axon instance\n */\nvar Axon = function Axon(config) {\n    var _this = this;\n\n    _this.$context = document.querySelector(config.context);\n    _this.$data = config.data;\n    _this.$methods = config.methods;\n\n    _this.$cache = _this.$init();\n    _this.$render();\n};\n\n/**\n * Expose Axon methods\n */\nAxon.prototype = {\n    $init: init,\n    $render: render,\n    constructor: Axon\n};\n\nreturn Axon;\n\n}());\n\n//# sourceMappingURL=axon.js.map\n"]}