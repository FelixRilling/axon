var Axon = function () {
    "use strict";
    const n = n => Array.from(n),
        t = n => Array.isArray(n),
        e = function (n) {
            const r = [];
            return n.forEach(n => {
                t(n) ? r.push(...e(n)) : r.push(n)
            }), r
        },
        r = n => void 0 !== n,
        i = function (t, e = document, r = !1) {
            return r ? n(e.querySelectorAll(t)) : e.querySelector(t)
        },
        u = n => n.name.startsWith("x-"),
        o = t => n(t.attributes).some(u),
        c = function (t) {
            return n(t.attributes).filter(u).map(n => {
                const t = n.name.replace("x-", "").split(":");
                const e = n.value;
                return {
                    val: e,
                    name: t[0],
                    opt: t[1] || !1
                }
            })
        },
        s = function (n, t, e) {
            return n.addEventListener(t, e, !1)
        },
        l = /\(.*\)/,
        a = /([\w\.]+)\s*\(((?:[^()]+)*)?\s*\)\s*/,
        f = function (n) {
            let t = n;
            for (; null !== t._parent;) t = t._parent;
            return t
        },
        d = function (n, t) {
            let e, i = t,
                u = 0;
            for (; u < n.length;) {
                const t = n[u];
                if (e = i[t], r(e)) {
                    if (!(u < n.length - 1)) return {
                        val: e,
                        set: n => i[t] = n
                    };
                    i = e
                }
                u++
            }
            return !1
        },
        h = n => n.val.apply(n.node.data, n.args),
        p = function (n, t) {
            if (l.test(n)) {
                const e = m(n, t);
                return h(e)
            }
            return v(n, t)
        },
        v = function (n, t) {
            const e = n.split(".");
            let r = !1,
                i = t;
            for (; !r;) {
                const n = d(e, i.data);
                if (!1 !== n) return n.node = i, n;
                !1 !== i._parent ? i = i._parent : r = !0
            }
            return !1
        },
        m = function (n, t) {
            const e = n.match(a),
                i = e[1].split("."),
                u = r(e[2]) ? e[2].split(",") : [],
                o = f(t),
                c = d(i, o.methods);
            return !1 !== c && (c.args = u, c.node = o, c)
        },
        _ = function (n) {
            return r(n.value) ? "value" : r(n.textContent) ? "textContent" : "innerHTML"
        },
        y = {
            model: {
                init: function (n, t) {
                    const e = t._element,
                        r = _(e);
                    return s(e, "input", function () {
                        v(n.val, t).set(e[r])
                    }), !0
                },
                render: function (n, t) {
                    const e = t._element,
                        r = _(e),
                        i = v(n.val, t);
                    return e[r] = String(i.val), !0
                }
            },
            bind: {
                render: function (n, t) {
                    return t._element.setAttribute(n.opt, p(n.val, t).val), !0
                }
            },
            text: {
                render: function (n, t) {
                    return t._element.textContent = p(n.val, t).val, !0
                }
            },
            html: {
                render: function (n, t) {
                    return t._element.innerHTML = p(n.val, t).val, !0
                }
            },
            if: {
                render: function (n, t) {
                    const e = t._element;
                    return p(n.val, t).val ? (e.removeAttribute("hidden"), !0) : (e.setAttribute("hidden", !0), !1)
                }
            },
            on: {
                init: function (n, t) {
                    const e = m(n.val, t);
                    return s(t._element, n.opt, () => e.val.apply(e.node.data, e.args)), !0
                }
            }
        },
        A = class {
            constructor(t = {}, r = null, i = null) {
                const u = this,
                    s = function (n) {
                        return o(n) ? new A({}, n, u) : n.children.length > 0 ? l(n.children) : null
                    },
                    l = t => e(n(t).map(s).filter(n => null !== n));
                this.data = t, this.directives = c(r), this._element = r, this._parent = i, this._children = l(r.children)
            }
            run(n) {
                return this.directives.map(t => {
                    const e = y[t.name];
                    return !e || (!e[n] || e[n](t, this))
                }).every(n => !1 !== n)
            }
            runDeep(n) {
                const t = this.run(n);
                return t && this._children.forEach(t => {
                    t.run(n)
                }), t
            }
            init() {
                return this.runDeep("init")
            }
            render() {
                return this.runDeep("render")
            }
        };
    return class extends A {
        constructor(n) {
            super(n.data, i(n.el)), this.methods = n.methods || {}, this.init(), this.render()
        }
    }
}();
